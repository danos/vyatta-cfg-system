#! /usr/bin/perl
#
# Module: vyatta-update-arp-params
#
# **** License ****
# Copyright (c) 2019-2020, AT&T Intellectual Property. All rights reserved.
# Copyright (c) 2014-2016 by Brocade Communications Systems, Inc.
# All rights reserved.
#
# This code was originally developed by Vyatta, Inc.
# Portions created by Vyatta are Copyright (C) 2009 Vyatta, Inc.
# All Rights Reserved.
#
# SPDX-License-Identifier: GPL-2.0-only
#
# Author: Mohit Mehta
# Date: February 2009
# Description: Update [ARP (IPv4)|Neighbor (IPV6)] Parameters
#
# **** End License ****
#

use strict;
use warnings;
use lib "/opt/vyatta/share/perl5";
use Getopt::Long;
use Vyatta::Configd;
use Vyatta::VPlaned;

my %dp_arp_params = (
    'stale-time' => 'stale-time',
    'table-size' => 'max-entry'
);
my $arp_node = "arp";
my $arp_path = "system ip $arp_node";
my $arp_prot = "arp";

my %dp_nd_params = (
    'resolution-throttling' => 'res-token',
    'table-size'            => 'max-entry'
);
my $nd_node = "neighbor";
my $nd_path = "system ipv6 $nd_node";
my $nd_prot = "nd6";

my $def_max_table_size = 8192;

sub set_dp_param {
    my ( $prot, $action, $dp_param, $value, $dev ) = @_;
    my $cstore = new Vyatta::VPlaned;

    $dev = "all" unless $dev;
    if ( !defined($value) ) {
        $value  = "";
        $action = "DELETE";
    }
    $cstore->store(
        "$prot $dev $dp_param",
        "$prot " . lc($action) . " $dev $dp_param $value",
        $dev, $action
    );
    return;
}

sub set_kernel_gc_thresholds {
    use integer;
    my ( $ip, $arp_value ) = @_;
    my $soft_max = $arp_value / 2;
    my $min      = $arp_value / 8;
    system("sysctl -q net.$ip.neigh.default.gc_thresh3=$arp_value");
    system("sysctl -q net.$ip.neigh.default.gc_thresh2=$soft_max");
    system("sysctl -q net.$ip.neigh.default.gc_thresh1=$min");
    return;
}

sub usage {
    print "Usage: $0 --action={SET|ACTIVE|DELETE} [--param=<param-name>] ",
      "[--value=<value>] [--dev=<interface>] [--ipv6]\n";
    exit 1;
}

my ( $action, $ipv6, $param_in, $value_in, $dev );

GetOptions(
    "action=s" => \$action,
    "param=s"  => \$param_in,
    "value=s"  => \$value_in,
    "dev=s"    => \$dev,
    "ipv6"     => \$ipv6,
) or usage();

$action = $ENV{COMMIT_ACTION} unless $action;
usage() unless $action && grep { $_ eq $action } ( "SET", "ACTIVE", "DELETE" );
$action = "SET" unless $action eq "DELETE";

my ( $ip, $node, $path, $prot, %dp_params );

if ($ipv6) {
    ( $ip, $node, $path, $prot, %dp_params ) =
      ( "ipv6", $nd_node, $nd_path, $nd_prot, %dp_nd_params );
} else {
    ( $ip, $node, $path, $prot, %dp_params ) =
      ( "ipv4", $arp_node, $arp_path, $arp_prot, %dp_arp_params );
}

my @params = sort( keys %dp_params );
my ( $config, $value );

if ( defined($param_in) ) {
    usage() unless grep { $_ eq $param_in } @params;
    usage() if !defined($value_in) && $action eq "SET";
    @params = ($param_in);
} else {
    my $client = Vyatta::Configd::Client->new();
    $config = $client->tree_get_hash($path)
      if $client->node_exists( $Vyatta::Configd::Client::AUTO, $path );
}

for my $param (@params) {

    # Resolution throttling is only available in the dataplane
    if ( $param eq "resolution-throttling" ) {
        $value = $config ? $config->{$node}->{$param} : $value_in;
        set_dp_param( $prot, $action, $dp_params{$param}, $value, $dev );
    }

    # Table size applies to both dataplane and kernel
    # Apply default for delete action, needed when parent node removed
    elsif ( $param eq "table-size" ) {
        $value = $config ? $config->{$node}->{$param} : $value_in;
        $value = $def_max_table_size unless defined($value) && $action eq "SET";
        set_dp_param( $prot, $action, $dp_params{$param}, $value, $dev );
        set_kernel_gc_thresholds( $ip, $value );
    }
}
